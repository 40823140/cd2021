var tipuesearch = {"pages": [{'title': '關於', 'text': '\n \n 倉儲: https://github.com/40823140/cd2021 \n YT: https://www.youtube.com/channel/UCRwHiobKiRzz3sCb6OIJXOQ \n 目前的cmsimde在編輯器下面再添加一個csave按鈕，意即協作保存，當動態網際管理系統在多人同時維護登錄網頁內容時，編輯各頁面列表，該頁面可能已經改版，因此使用csave按鈕存檔時，會介紹當下最新的該頁面內容，並同時與編輯中的頁面內容進行合併。 \n 使用csave按鈕存檔無法刪除頁面資料。 \n 使用Edit All模式，無法使用csave按鈕（尚未測試）。 \n', 'tags': '', 'url': '關於.html'}, {'title': 'stage1', 'text': '', 'tags': '', 'url': 'stage1.html'}, {'title': 'W1', 'text': '利用 https://github.com/mdecourse/cmstemplate \xa0樣板，建立網頁 \n \n', 'tags': '', 'url': 'W1.html'}, {'title': 'W2', 'text': '經過與組員討論決定要做自動折衣板 \n https://www.youtube.com/watch?v=vB0G4zdbkXg&ab_channel=%E6%B0%91%E8%A6%96%E6%96%B0%E8%81%9E%E7%B6%B2FormosaTVNewsnetwork \n 上網查詢資料，取決產品規格大小 \n \n 構圖 \n \n 運用3D繪圖軟體畫出產品 \n \n \n \n \n', 'tags': '', 'url': 'W2.html'}, {'title': '利用Hamachi建立虛擬網路', 'text': '首先下載 https://www.vpn.net/ \n \n 之後建立虛擬網路並設定密碼， 來達成就算在不同網域的情況下，也能夠藉由連上組長的虛擬區網來進行小組網頁編輯 \n \n', 'tags': '', 'url': '利用Hamachi建立虛擬網路.html'}, {'title': 'W3', 'text': '利用coppeliasim對已完成之成品進行模擬 \n', 'tags': '', 'url': 'W3.html'}, {'title': 'W4', 'text': '報告 \n', 'tags': '', 'url': 'W4.html'}, {'title': 'stage2', 'text': '', 'tags': '', 'url': 'stage2.html'}, {'title': 'W5', 'text': '分組組員： \n 張欽堯 \n 黃歸吉 \n 林子恩 \n 蕭宏翔 \n', 'tags': '', 'url': 'W5.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': 'Heroku小組網站', 'text': '步驟一： \xa0 （ 建立Heroku的帳號 ）展示進入 https://heroku.com ，利用學校配發的@gm登記一個Heroku的帳號，關鍵在於密碼設定必須要至少8個字元，且字元中必須包含符號，英文字母和數字，並且登記後要進入@gm帳號進行確認後才能開通Heroku帳號。 \xa0 \n 完成帳號登記後，必須知道目前Heroku只允許免費建立五個應用程序，並且每個程序的最大容量為500MB。 \n 步驟二： \xa0 （ 建立Heroku的應用程序 ）的Heroku登入後，先以S +學號建立第一個應用程序，完成後，將可至HTTPS：//小號學號.herokuapp.com連線取得網站最初內容。 \n 步驟三：（ \xa0 下載Heroku CLI）從 http://a.kmol.info:88/heroku.7z 下載Heroku cli程式檔案，解開至隨身碟Y：所在位置或是是Hybrid設定的位置。 \xa0 \xa0 \n 步驟四： \xa0 （ 修改命令搜尋路徑 ）修改隨身系統的啟動批次檔案，讓視窗的命令視窗中可以執行heroku.exe，或者稱作“設法將heroku.exe所在目錄位置，設為視窗搜尋路徑之一”。 \n 重新啟動已經完全重置heroku.exe的隨身碟start_ipv6.bat或start_ipv4.bat \n 步驟五： \xa0 （ 測試Heroku的執行 ）測試是否能夠在修改後的命令列中執行 heroku.exe，輸入Heroku的版本若回應所使用的版本表示上述路徑設定已經成功 。 \n 步驟六： \xa0 （ 設定Heroku的代理主機 ）先前我們已經知道網路的應用包含客戶端與服務器，客戶端不同採用不同的代理設定與服務器連線，其中火狐作為WWW網路協定的客戶端，有其自己的網路代理設置，也可以直接使用操作系統的 \n', 'tags': '', 'url': 'Heroku小組網站.html'}, {'title': '小組產品', 'text': '投放小組產品 \n', 'tags': '', 'url': '小組產品.html'}, {'title': 'W7', 'text': '更新小組網頁 \n \n', 'tags': '', 'url': 'W7.html'}, {'title': 'W8', 'text': '更新小組網頁 \n \n', 'tags': '', 'url': 'W8.html'}, {'title': 'W9', 'text': '期中報告 \n', 'tags': '', 'url': 'W9.html'}, {'title': 'stage3', 'text': '組員: \n 40823111許耀中 \n 40823115黃歸吉 \n 40823128曾鑵斁 \n 40823120范維倫 \n 40823140林子恩 \n 40823124廖璟程 \n 40823139王銘楫 \n 40823126楊育翔 \n \n 同步小組倉儲 \n', 'tags': '', 'url': 'stage3.html'}, {'title': 'W10', 'text': '', 'tags': '', 'url': 'W10.html'}, {'title': 'task1', 'text': '讀取 stage3_2a.txt, 建立 Stage3 的分組倉儲, 分組網頁, 以及各組員倉儲及網頁連結 \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': 'coppeliasim版本需用4.2.0版,並透過以下程式可遠端操作小車運作 \n \n 至1網站下載，接著解壓縮，並將2.3.4檔案也放進相同資料夾(bubble) \n \n 將ttt檔丟入coppeliaSim裡進行操控 \n \n 將老師所提供的 bubbleRob_remoteAPI.py放入stage1.2的作品裡進行模擬 \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'API操作影片', 'text': '\n \n', 'tags': '', 'url': 'API操作影片.html'}, {'title': 'W11', 'text': '', 'tags': '', 'url': 'W11.html'}, {'title': 'task3', 'text': '每週各組按照組員順序, 於每堂課程時段, 輪流由 2-3 名學員啟動 OBS + Youtube 直播 (每週每位學員均需輪流負責直播工作項目內容), 並在開播前將直播 URL 公布於課程 gitter, 以展示該時段該組針對 stage3 分組專題工作項目的協同過程. (即每週各組於上課時段均會有四段協同設計影片分別嵌入各負責直播錄影組員的網頁與分組網頁). \n 各直播錄影時段, 各直播組員 (2-3 名) 應先規劃進行中工作項目的網際簡報資料, 並依照簡報內容逐一介紹所要展示或討論的協同設計項目. \n 當其他組別在執行 stage3 分組專題內容碰到問題時, 應按照順序採取下列步驟解決問題: \n \n 利用協同直播錄影時段, 輔以網際簡報資料, 明確說明所遭遇之問題情境. \n 上述影片上傳並嵌入個人網站與分組網站後, 根據問題描述影片內容, 尋求其他組在其分段直播時段說明如何解題. \n \n 各組組員於進行 stage3 分組專題期間, 均應協同負責從 零組件設計繪圖 , \xa0 零件轉檔 , 零組件轉入 \xa0 CoppeliaSim 進行設定 , \xa0 Lua 監控 , \xa0 Python 監控 , \xa0 直播錄影 , ssh 維護 個人網際簡報 , ssh 維護 個人網站 , 並協同參與維護 分組網站 等工作項目, 若過程中遭遇問題, 則根據上述步驟進行解題. \n 直播前: 準備網際投影片 \n 開啟直播: 將直播投影片(即直播主題) 與直播連結登錄在 \xa0 https://gitter.im/mdecourse/cd2021 \n 直播結束後: 將影片嵌入個人與分組網頁後, 連結繳交至 \xa0 https://github.com/mdecourse/cd2021/discussions/24 \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'W12', 'text': '\n', 'tags': '', 'url': 'W12.html'}, {'title': 'W13', 'text': '遠距教學 \n', 'tags': '', 'url': 'W13.html'}, {'title': 'W14', 'text': '', 'tags': '', 'url': 'W14.html'}, {'title': 'task4', 'text': '\n 自行利用 SolidWorks, Inventor, NX, Onshape 或 Solvespace 繪製機械手臂零組件後, 分別以 ASCII STL 或 Binary STL 手動轉入 Coppeliasim 建立機械手臂 .ttm 模型備用. \n 根據 CoppeliaSim 4.1.0 版 (4.2.0 無法開啟 .simplescene.xml 檔案) 中的 \xa0 XML simplescene 格式 , 利用 Python 程式建立所需的機械手臂 .ttm 模型備用. \n 根據 RoKiSim 中的六軸機械手臂定義, 以 Python 程式, 將既有的 Industrial Robots STL 轉為 CoppeliaSim simplexml 模型格式備用. \n 將上述完成的機械手臂模型導入場景後, 機械手臂末端利用 force sensor 接上 components/grippers/suction pad.ttm tool 後, 先完成 MTB Robot 取放 Block 範例的改寫, 再完成 \xa0 FANUC M-710iC/50 \xa0 機械手臂的 圓球取放範例 . \n \n', 'tags': '', 'url': 'task4.html'}, {'title': '影片', 'text': '\n', 'tags': '', 'url': '影片.html'}, {'title': 'W15', 'text': '\n', 'tags': '', 'url': 'W15.html'}, {'title': '運動學1', 'text': '\n We saw this simple two-link robot in the previous lecture about forward kinematics. \n 我們在上一堂關於正向運動學的講座中看到了這個簡單的雙連桿 \n The tooltip pose of this robot is described simply by two numbers, \n 這個連桿的工具提示動作簡單的用兩個數字來描述 \n the coordinates x and y with respect to the world coordinate frame. \n 相對於世界坐標系的坐標x和y \n So, the problem here is that given x and y, \n 所以，這裡的問題是給定x和y， \n we want to determine the joined angles, Q1 and Q2. \n 我們想要確定連接的角度，Q1和Q2。 \n The solution that we’re going to follow in this particular section is a geometric one. \n 在這個特殊的部分，我們將要遵循的解是一個幾何解。 \n We’re going to start with a simple piece of construction. \n 我們將從一塊簡單的結構開始。 \n We’re going to overlay the red triangle on top of our robot. \n 我們要把紅色三角形覆蓋在連桿上面。 \n We know that the end point coordinate is x,y, \n 我們知道終點坐標是x，y， \n so the vertical height of the triangle is y, the horizontal width is x. \n 所以三角形的垂直高度是y，水平宽度是x。 \n And, using Pythagoras theorem, we can write r squared equals x squared plus y squared. \n 利用畢式定理，我們可以寫出r的平方等於x的平方加上y的平方。 \n So far, so easy. \n 到目前為止，一切都很簡單。 \n Now, we’re going to look at this triangle highlighted here in red and we want to determine \n the angle alpha. \n 現在，我們要看一下這裡用紅色突出顯示的這個三角形，我們想要確定。角度Alpha。 \n In order to do that, we need to use the cosine rule. \n 為了達成這一點，我們需要使用餘弦定理。 \n And, if you’re a little rusty on the cosine rule, here is a bit of a refresher. \n 如果你對余弦定理有點不熟悉。這裡有一個複習。 \n We have an arbitrary triangle. \n 我們有一個任意的三角形。 \n We don’t have to have any right angles in it \n 我們不用有任何直角。 \n and we’re going to label the length of this edge as A and the angle \n opposite that edge, we’re going to label as little a. \n 我們將這條邊的長度標記為A角。 \n 另外在那個邊緣的對面，我們將標記為小a角。 \n And, we do the same for this edge and this \n angle, and this edge and this angle. \n 我們對邊邊和這角度，以及邊邊和這個角度做同樣的事 \n So, all together, the sides are labelled capitals \n A, B and C, and the angles are labelled little \n a, little b, and little c. \n 所以所有邊都標記為大寫字母 A、B 和 C，角標記為小 a、小 b 和小 c。 \n So, the cosine rule is simply this relationship here. \n 所以餘弦定理在這裡就是這種關係 \n It’s a bit like Pythagoras’ theorem except for this extra term on the end with the cos a in it. \n 它有點像畢氏定理，除了末尾有額外的 cos a 。 \n Now, let’s apply the cosine rule to the particular triangle we looked at a moment ago. \n 現在，我們將餘弦定理應用於我們剛才看到的特定三角形。 \n It’s pretty straightforward to write down this particular relationship. \n 寫下這種特殊關係式是非常簡單。 \n We can isolate the term cos alpha which gives us the angle alpha that we’re interested in. \n 我們可以分離出 cos\xa0 α 項，它給出了我們 α角 。 \n And, it’s defined in terms of the constant link lengths, A1 and A2 and the position of the end effector, x and y. \n 而且，它是根據恆定連桿長度 A1 和 A2 以及末端執行器的位置 x 和 y 定義的。 \n We can write this simple relationship between the angles alpha and Q2. \n 我們可以寫出角度 \xa0 α \xa0 和 Q2 之間的關係。 \n And, we know from the shape of the cosine function that cos of Q2 must be equal to negative of cos alpha. \n 而且，我們從餘弦定理的形狀知道，Q2 的 cos 必須等於 -cos \xa0 α \xa0。 \n This time, let’s just write an expression \n for the cosine of the joined angle Q2. \n 我們只寫一個表達式 對於連接角 Q2 的餘弦。 \n Now, we’re going to draw yet another red \n triangle and we’re going apply some simple trigonometry here. \n 現在，我們將繪製另一個紅色三角形，並在此處應用一些簡單的三角函數。 \n If we know Q2, then we know this length and this length of the red triangle. \n 如果我們知道 Q2，那我們就知道這個長度和這個紅色三角形的長度。 \n We can write this relationship for the sine of the joined angle Q2. \n 我們可以寫出連接角 Q2 的正弦關係。 \n Now, we can consider this bigger triangle whose angle is beta and this side length of \n the triangle is given here in blue. \n 現在，我們可以考慮這個更大的三角形，它的角是β，三角形的這條邊長在這裡用藍色表示。 \n And, the length of the other side of the triangle is this. \n 另外，三角形另一邊的長度是這個。 \n So, now we can write an expression for the angle beta in terms of these parameters here. \n 所以，我們可以在這裡根據這些參數編寫角度\xa0 β \xa0 的表達式。 \n Going back to the red triangle that we drew earlier, we can establish a relationship between \n Q1 and the angle beta. \n 回到之前畫的紅色三角形，我們可以建立Q1和角度β之間的關係。 \n Introduce yet another angle, this one gamma and we can write a relationship between the \n angle gamma and the tooltip coordinates x and y. \n 導入另一個角度，這個 γ ，我們可以寫出 γ角 和工具提示坐標 x 和 y 之間的關係。 \n Now, we can write a simple relationship between the angles that we’ve constructed, gamma \n and beta and the joined angle we’re interested in which is Q1. \n 我們可以在我們構建的角度 γ \xa0 和 \xa0 β \xa0 與我們感興趣的連接角度 Q1 之間寫出一個簡單的關係。 \n And, the total relationship looks something like this. \n 所以，整體關係看起來像這樣。 \n Quite a complex relationship, it gives us the angle of joined one, that’s Q1 in terms \n of the end effector coordinates y and x, \n 相當複雜的關係，它為我們提供了連接的角度，即末端執行器坐標 y 和 x 的 Q1， \n and a bunch of constants, a1 and a2, and it’s \n also a function of the second joint angle, Q2. \n 和一堆常數 a1 和 a2，它也是第二個關節角度 Q2 的函數。 \n So, let’s summarize what it is that we have derived here. \n 所以，我們總結一下。 \n We have an expression for the cosine of Q2 \n and we have an expression for Q1. \n 我們有 Q2 的餘弦表達式和Q1 的表達式。 \n Now, the cosine function is symmetrical about 0. \n 現在，餘弦函數關於 0 對稱。 \n so, if we know the value of the cosine of Q2, \n 所以，如果我們知道 Q2 的餘弦值， \n then there are two possible solutions, \n 那麼有兩種可能解決方法， \n a positive angle and a negative angle. \n 一個正角和一個負角。 \n We’re going to explicitly choose the positive angle, which means that I can write this expression here. \n 我們將明確選擇正角，表示我可以在這裡寫這個表達式。 \n And now, we have what we call the inverse kinematic solution for this two-link robot. \n 現在，我們有了這個雙連桿的逆運動學解決方法。 \n We have an expression for the two joined angles, \n 我們有兩個連接角的表達式， \n Q1 and Q2 in terms of the end effector pose x and y, and a bunch of constants. \n Q1 和 Q2 就末端執行器姿勢 x 和 y 而言，以及一堆常數。 \n You notice that the two equations are not independent. \n 你會注意到這兩個方程式不是沒有獨立的的。 \n The equation for Q1, in fact, depends on the solution for Q2. \n 其實，Q1 的方程取決於 Q2 的解。 \n In this case, Q2 is negative and we’re going to write the solution for Q2 with a negative \n sign in front of the inverse cosine. \n 在這種情況下，Q2 是負數，我們將在反餘弦前用負號編寫表示 Q2 的解。 \n Now, we need to solve for Q1, so we’re going to introduce this particular red triangle, \n 現在，我們需要求解 Q1，所以我們將介紹這個特殊的紅色三角形， \n the angle beta that we solved previously, \n 我們之前求的β角， \n and the angle gamma which is defined in terms of y and x. \n 以及根據 y 和 x 定義的 γ角 。 \n Now, we write a slightly different relationship between Q1, \n 我們現在寫出 Q1 之間略有不同的關係， \n gamma and beta, different to what we had before. \n y \xa0 和 \xa0 β ，跟我們之前的不一樣。 \n There’s a change of sign involved. \n 這些也牽涉到符號改變。 \n Then, we can substitute all that previous equation and come up with this expression \n for Q1. \n 然後我們可以替換之前的所有等式並得出 Q1 的這個方程式。 \n Again, there is a change of sign here. \n 再一次 這時候這裡的符號不一樣了 \n Previously, this was a negative sign. \n 之前，這是一個負號。 \n And, here in summary form is the solution \n 而且，這裡是總結形式的解決方法 \n for the inverse kinematics of our two-link robot when it is in this particular configuration, where Q2 is negative. \n 對於我們的雙連桿在這種特定配置下的逆運動學，其中 Q2 為負。 \n Let’s compare the two solutions, the case where q2 is positive and the case where q2 is negative. \n 我們比較兩個解決方案，q2 為正的情況和 q2 為負的情況。 \n \n 本影片最後導出的方程式： \n \n X，Y，a1，a2 是已知先求出q2以後再倒入第二個公式再求出q1 \n', 'tags': '', 'url': '運動學1.html'}, {'title': '運動學2', 'text': "\n Here we have the same two link robot as we just looked at but this time we're going to solve it using an analytical approach, \n 在這裡，我們有與剛才看到的相同的兩個連桿，但這次我們將使用分析方法來解決， \n that is we're going to rely much more on algebra, \n 我們會頻繁的使用代數， \n particular linear algebra rather than geometry. \n 特定的線性代數而不是幾何。 \n We have an expression E, which is the homogeneous transformation which represents the pose of the robots endefector and we looked at this in the last lecture, \n 我們有一個表達式 E，它是表示連桿最後的齊次變換式，我們在上一課中看到了這一點， \n we can write the endefector pose as a sequence of elementary homogeneous transformations. \n 我們可以將最終位置寫為一系列基本齊次變換式。 \n A rotation by Q1, a translation along the X direction by A1, a rotation by Q2 and then a translation in the X direction by A2. \n Q1 旋轉，A1 沿 X 方向平移，Q2 旋轉，然後 A2 沿 X 方向平移。 \n If I expand this out, multiply all the transformations together, \n 如果我將其展開，將所有變換相乘， \n I get the expression shown here; a three by three homogeneous transformation \n matrix representing the pose of the robot's endefector. \n 就會得到此處所示的表達式 ;它是一個三乘三的齊次變換矩陣，表示連桿的最終的位置。 \n Now for this particular two link robot, we are only interested in the position of its endefector, it's X and Y co-ordinate and they are these two elements within the homogeneous \n transformation matrix, so I'm going to copy those out. \n 現在這個特殊的連桿，我們只要取末端位置，它是 X 和 Y 坐標，它們是同質內的這兩個元素轉換矩陣，所以我要把它們複製出來。 \n So here again is our expression for X and Y and what we're going to do is \n a fairly common trick, we're going to square and add these two equations and I get a relationship that looks like this. \n 所以這裡又是我們對 X 和 Y 的表達式，我們要做的是一個相當常見的技巧，我們要平方然後加這兩個方程式，我得到一個看起來像這樣的關係。 \n Now I can solve for the joint angle Q2 in terms of the endefector pose X and Y and the robot's constants A1 and A2. \n 現在我可以根據機器手臂姿勢 X 和 Y 以及機器人的常數 A1 和 A2 來求解關節角度 Q2。 \n Now what I'm going to do is apply the sum of angles identity. \n 現在要做的是應用角度恆等式。 \n I'm going to expand these terms, sine of Q1 plus Q2 or cos of Q1 plus \n Q2 and to make life a little bit easier, \n I'm going to make some substations, so where ever I had cos Q2, \n I'm going to write C2 and where ever I had sine Q2, I’m going to write S2. \n 我將擴展這項，Q1 的正弦加 Q2 或 Q1 的餘弦加 Q2 為了讓式子更簡單， \n It's a fairly common shorthand when people are looking at robot kinematic equations. \n 當人們查看機器人運動學方程時，這是一個相當常見的快速記憶法。 \n And here are the equations after making those substitutions. Looking at these two equations, \n 這是進行這些替換後的方程式。 看這兩個方程， \n I can see that they fall into a very well known form and for that form there is a very well known solution. \n 我可以看到它們屬於一個眾所周知的形式，對於這種形式，有一個淺顯易見的解決方法。 \n So I'm going to consider just one of the equations, \n the equation for Y and using our well known identity and it's solution, \n 所以我會只考慮其中一個方程， \n Y的方程並使用我們眾所周知的表達式和它的解決方案， \n I can determine the values for the variables little a, little b and little c and once I've determined those, \n 我可以確定變量小 a、小 b 和小 c 的值，一旦我確定了這些值， \n then I can just write down the solution for Q1, \n which is the equivalent of theta in this particular case. \n 如果我確定了這些，我就可以寫下 Q1 的解決方程式，在這種特殊情況下，x 就等於 \xa0 θ 。 \n Here again is our expression for Q1, \n 這裡再次是我們對 Q1 的表達式， \n copied over from the previous slide and we may remember from earlier in our workings that we determined this particular relationship; \n 從上一張投影片複製過來，我們可能記得在我們工作的早期，我們確定了這種特殊的關係； \n X squared plus Y squared is equal to this particular complex expression. \n X 平方加 Y 平方等於這個特定的複雜表達式。 \n So I can substitute that in and do some simplification and I end up with this \n slightly less complex expression for Q1. \n 所以我可以將他替換然後進行一些簡化，最終得到 Q1 的這個稍微不那麼複雜的表達式。 \n And it is the same expression that I got following the geometric approach in the previous section. \n 這與我在上一節中遵循幾何方法得到的表達式相同。 \n \n 本影片倒出來的公式： \n \n", 'tags': '', 'url': '運動學2.html'}, {'title': 'W16', 'text': 'Lua學習 \n', 'tags': '', 'url': 'W16.html'}, {'title': '(1) Onshape 繪製出機械手臂零件-1', 'text': '圖檔連結: \n https://cad.onshape.com/documents/22b320394031fdfb4b896ad7/w/050082eb839377f8cf69a462/e/b48c0f80640d18c37777534f \n 影片: \n \n \n', 'tags': '', 'url': '(1) Onshape 繪製出機械手臂零件-1.html'}, {'title': '(2) 建立 CoppeliaSim 4.1.0 MTB robot 場景-1', 'text': '影片: \n \n 程式 \n', 'tags': '', 'url': '(2) 建立 CoppeliaSim 4.1.0 MTB robot 場景-1.html'}, {'title': '(3) 加components-gripper-suction pad 吸盤-1', 'text': '影片: \n \n', 'tags': '', 'url': '(3) 加components-gripper-suction pad 吸盤-1.html'}, {'title': '(4) 逆向運動學函式-1', 'text': '影片: \n \n', 'tags': '', 'url': '(4) 逆向運動學函式-1.html'}, {'title': '(5) Python remote API 逆向運動學函式-1', 'text': '影片: \n \n', 'tags': '', 'url': '(5) Python remote API 逆向運動學函式-1.html'}, {'title': 'W17', 'text': '檔案連結 \n', 'tags': '', 'url': 'W17.html'}, {'title': '(1) Onshape 繪製出機械手臂零件-2', 'text': '圖檔連結: \n https://cad.onshape.com/documents/22b320394031fdfb4b896ad7/w/050082eb839377f8cf69a462/e/b48c0f80640d18c37777534f \n 影片: \n \n \n', 'tags': '', 'url': '(1) Onshape 繪製出機械手臂零件-2.html'}, {'title': '(2) 建立 CoppeliaSim 4.1.0 MTB robot 場景-2', 'text': '影片: \n \n', 'tags': '', 'url': '(2) 建立 CoppeliaSim 4.1.0 MTB robot 場景-2.html'}, {'title': '(3) 加components-gripper-suction pad 吸盤-2', 'text': '影片: \n \n 吸盤程式 \n function sysCall_init()   objectHandle=sim.getObjectHandle(\'suctionPad\')  sim.setUserParameter(objectHandle,\'@enable\',\'\')  modelBase=sim.getObjectAssociatedWithScript(sim.handle_self)  robotBase=modelBase  while true do  robotBase=sim.getObjectParent(robotBase)  if robotBase==-1 then  robotName=\'Dobot\'  break  end  robotName=sim.getObjectName(robotBase)  suffix,suffixlessName=sim.getNameSuffix(robotName)  if suffixlessName==\'Dobot\' then  break  end  end \n s=sim.getObjectHandle(\'suctionPadSensor\')  l=sim.getObjectHandle(\'suctionPadLoopClosureDummy1\')  l2=sim.getObjectHandle(\'suctionPadLoopClosureDummy2\')  b=sim.getObjectHandle(\'suctionPad\')  suctionPadLink=sim.getObjectHandle(\'suctionPadLink\')  local gripperBase=sim.getObjectAssociatedWithScript(sim.handle_self) \n infiniteStrength=sim.getScriptSimulationParameter(sim.handle_self,\'infiniteStrength\')  maxPullForce=sim.getScriptSimulationParameter(sim.handle_self,\'maxPullForce\')  maxShearForce=sim.getScriptSimulationParameter(sim.handle_self,\'maxShearForce\')  maxPeelTorque=sim.getScriptSimulationParameter(sim.handle_self,\'maxPeelTorque\') \n sim.setLinkDummy(l,-1)  sim.setObjectParent(l,b,true)  m=sim.getObjectMatrix(l2,-1)  sim.setObjectMatrix(l,-1,m) end \n function sysCall_cleanup()   sim.setLinkDummy(l,-1)  sim.setObjectParent(l,b,true)  m=sim.getObjectMatrix(l2,-1)  sim.setObjectMatrix(l,-1,m) end \n function sysCall_sensing()   parent=sim.getObjectParent(l)  local sig=sim.getIntegerSignal("pad_switch")  if (not sig) or (sig==0) then  if (parent~=b) then  sim.setLinkDummy(l,-1)  sim.setObjectParent(l,b,true)  m=sim.getObjectMatrix(l2,-1)  sim.setObjectMatrix(l,-1,m)  end  else  if (parent==b) then  index=0  while true do  shape=sim.getObjects(index,sim.object_shape_type)  if (shape==-1) then  break  end  local res,val=sim.getObjectInt32Parameter(shape,sim.shapeintparam_respondable)  if (shape~=b) and (val~=0) and (sim.checkProximitySensor(s,shape)==1) then  -- Ok, we found a respondable shape that was detected  -- We connect to that shape:  -- Make sure the two dummies are initially coincident:  sim.setObjectParent(l,b,true)  m=sim.getObjectMatrix(l2,-1)  sim.setObjectMatrix(l,-1,m)  -- Do the connection:  sim.setObjectParent(l,shape,true)  sim.setLinkDummy(l,l2)  break  end  index=index+1  end  else  -- Here we have an object attached  if (infiniteStrength==false) then  -- We might have to conditionally beak it apart!  result,force,torque=sim.readForceSensor(suctionPadLink) -- Here we read the median value out of 5 values (check the force sensor prop. dialog)  if (result>0) then  breakIt=false  if (force[3]>maxPullForce) then breakIt=true end  sf=math.sqrt(force[1]*force[1]+force[2]*force[2])  if (sf>maxShearForce) then breakIt=true end  if (torque[1]>maxPeelTorque) then breakIt=true end  if (torque[2]>maxPeelTorque) then breakIt=true end  if (breakIt) then  -- We break the link:  sim.setLinkDummy(l,-1)  sim.setObjectParent(l,b,true)  m=sim.getObjectMatrix(l2,-1)  sim.setObjectMatrix(l,-1,m)  end  end  end  end  end end \n \n', 'tags': '', 'url': '(3) 加components-gripper-suction pad 吸盤-2.html'}, {'title': '(4) 逆向運動學函式-2', 'text': '影片: \n \n 主控程式 \n function moving(x,y)  a=0.400\xa0➛連心線距離  b=0.400  c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)  s=(a+b+c)/2  area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)\xa0➛運用海龍公式算面積  h=area/(2*c)  deg1_base=math.atan(x/y)  if x<0 and y<0 then  deg1_base=deg1_base+math.pi  end  deg1_tri=math.asin(h/a)  deg1=deg1_base+deg1_tri  deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)  deg3=deg2-deg1  sim.setJointTargetPosition(joint01,deg1)  sim.setJointTargetPosition(joint02,-deg2)\xa0➛各軸旋轉角度  sim.setJointTargetPosition(joint03,deg3)   end \n function sysCall_threadmain()  joint01=sim.getObjectHandle(\'joint1\')  joint02=sim.getObjectHandle(\'joint2\')\xa0➛呼叫程式代碼  joint03=sim.getObjectHandle(\'joint3\')  jointz=sim.getObjectHandle(\'jointz\')  sim.setJointTargetPosition(joint01,0)  sim.setJointTargetPosition(joint02,0)\xa0➛設定位置  sim.setJointTargetPosition(joint03,0)  sim.setJointTargetPosition(jointz,0)  sim.setIntegerSignal("pad_switch",1)\xa0➛開啟吸盤  sim.setJointTargetPosition(jointz,-0.04)\xa0➛z軸向下吸取，距離0.04  sim.wait(2)\xa0➛等待2秒  sim.setJointTargetPosition(jointz,0)  while sim.getSimulationState()~=sim.simulation_advancing_abouttostopre do\xa0➛迴圈  moving(0.2,0.7)\xa0➛移動到指定位置(藉由上方副程式算出)  sim.wait(2)  sim.setIntegerSignal("pad_switch",0)\xa0➛放下方塊  sim.wait(2)  sim.setIntegerSignal("pad_switch",1)  sim.setJointTargetPosition(jointz,-0.04)  sim.wait(2)  sim.setJointTargetPosition(jointz,0)  sim.wait(2)  moving(-0.3,-0.55)  sim.wait(2)  sim.setIntegerSignal("pad_switch",0)  sim.wait(2)  sim.setIntegerSignal("pad_switch",1)  sim.setJointTargetPosition(jointz,-0.04)  sim.wait(2)  sim.setJointTargetPosition(jointz,0)  sim.wait(2)  moving(0.1,0.55)  sim.wait(2)  sim.setIntegerSignal("pad_switch",0)  sim.wait(2)  sim.setIntegerSignal("pad_switch",1)  sim.setJointTargetPosition(jointz,-0.04)  sim.wait(2)  sim.setJointTargetPosition(jointz,0)  sim.wait(2)  moving(0,0.8)  sim.wait(2)  sim.setIntegerSignal("pad_switch",0)  sim.wait(2)  sim.setIntegerSignal("pad_switch",1)  sim.setJointTargetPosition(jointz,-0.04)  sim.wait(2)  sim.setJointTargetPosition(jointz,0)  sim.wait(2)  end end \n', 'tags': '', 'url': '(4) 逆向運動學函式-2.html'}, {'title': '(5) Python remote API 逆向運動學函式-2', 'text': '影片: \n \n API程式 \n import sim as vrep import math import random import time import math \n def moving(x,y):  a=0.400   b=0.400  c=math.pow(math.pow(x,2)+math.pow(y,2),0.5)  s=(a+b+c)/2  area=math.pow((s*(s-a)*(s-b)*(s-c)),0.5)  h=area/(2*c)  deg1_base=math.atan(x/y)  if x<0 and y<0 :  deg1_base=deg1_base+math.pi  deg1_tri=math.asin(h/a)  deg1=deg1_base+deg1_tri  deg2=math.pi-(0.5*math.pi-deg1_tri)-math.acos(h/b)  deg3=deg2-deg1  vrep.simxSetJointTargetPosition(clientID,joint01,deg1,opmode)  vrep.simxSetJointTargetPosition(clientID,joint02,-deg2,opmode)  vrep.simxSetJointTargetPosition(clientID,joint03,deg3,opmode)   print (\'Start\')   vrep.simxFinish(-1)   clientID = vrep.simxStart(\'127.0.0.1\', 19997, True, True, 5000, 5)   if clientID != -1:  print (\'Connected to remote API server\')    res = vrep.simxAddStatusbarMessage(  clientID, " ",  vrep.simx_opmode_oneshot)  if res not in (vrep.simx_return_ok, vrep.simx_return_novalue_flag):  print("Could not add a message to the status bar.")      opmode = vrep.simx_opmode_oneshot_wait  STREAMING = vrep.simx_opmode_streaming    vrep.simxStartSimulation(clientID, opmode)  ret,joint01=vrep.simxGetObjectHandle(clientID,\'joint1\',opmode)  ret,joint02=vrep.simxGetObjectHandle(clientID,\'joint2\',opmode)  ret,joint03=vrep.simxGetObjectHandle(clientID,\'joint3\',opmode)  ret,joint04=vrep.simxGetObjectHandle(clientID,\'jointz\',opmode)    vrep.simxSetJointTargetPosition(clientID,joint01,0,opmode)  vrep.simxSetJointTargetPosition(clientID,joint02,0,opmode)  vrep.simxSetJointTargetPosition(clientID,joint03,0,opmode)  vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)  vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)  vrep.simxSetJointTargetPosition(clientID,joint04,-0.038,opmode)  time.sleep(2)  vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)  time.sleep(2)      while True:  moving(0.2,0.7)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)  vrep.simxSetJointTargetPosition(clientID,joint04,-0.038,opmode)  time.sleep(2)  vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)  time.sleep(2)  moving(-0.3,-0.55)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)  vrep.simxSetJointTargetPosition(clientID,joint04,-0.038,opmode)  time.sleep(2)  vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)  time.sleep(2)  moving(0.1,0.55)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)  vrep.simxSetJointTargetPosition(clientID,joint04,-0.038,opmode)  time.sleep(2)  vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)  time.sleep(2)  moving(0,0.8)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",0,opmode)  time.sleep(2)  vrep.simxSetIntegerSignal(clientID,"pad_switch",1,opmode)  vrep.simxSetJointTargetPosition(clientID,joint04,-0.038,opmode)  time.sleep(2)  vrep.simxSetJointTargetPosition(clientID,joint04,0,opmode)  time.sleep(2) \n', 'tags': '', 'url': '(5) Python remote API 逆向運動學函式-2.html'}, {'title': '(6) 遇到問題', 'text': '沒有設定軸的扭力 \n \n', 'tags': '', 'url': '(6) 遇到問題.html'}, {'title': '(7) 心得', 'text': '這次的期末考又學到了很多技術，一開始是Onshape畫圖，接下來是CoppeliaSim的很多技巧， \n 再來是學習怎麼寫程式，寫程式時要把自己當作機器人，一步驟一步驟寫，接直到成功，再來要 \n 謝謝組員，在技術上有問題時都能馬上支援，一起討論，並解決問題的時候很棒。', 'tags': '', 'url': '(7) 心得.html'}]};